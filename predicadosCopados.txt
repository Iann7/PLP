permutacion([],[])
permutacion([X|XS],P) :- permutacion(XS,L), insertar(X,L,P).

iesimo(0,[X|_],X).
iesimo(I,[_|XS],X) :- iesimo(I2,XS,X), I is I2 + 1.

desde(X,X).
desde(X,Y) :- N is X+1, desde(N,Y).

desde2(X,X).
desde2(X,Y) :- var(Y), N is X+1, desde2(N,Y).
desde2(X,Y) :- nonvar(Y), X < Y.

paresSuman(S,X,Y) :- S1 is S-1, between(1,S1,X), Y is S-X.  

generarPares(X,Y) :- desde2(2,S), paresSuman(S,X,Y).

corteMasParejo(L,L1,L2) :- unCorte(L,L1,L2,D), not((unCorte(L,_,_,D2), D2 < D)).

sublista(_,[]).
sublista(L,S) :- append(P,_,L), append(_,S,P), S \= [].

-----------------------
EJ PARCIAL 

sublistaMasLargaDePrimos(L,P) :- sublistaDePrimosDeLong(L,P,Long), not((sublistaDePrimosDeLong(L,_,Long2), Long2 > Long)).

sublistaDePrimosDeLong(L,P,Long) :- sublista(L,P), soloPrimos(P), length(P,Long).

soloPrimos(L) :- not((member(X,L), not(esPrimo(X)))).

% esPrimo(+P)
esPrimo(P) :- P \= 1, P2 is P-1, not((between(2,P2,D), mod(P,D) =:= 0)).


%?- listaDeÁrboles(L).
%L = [];														
%L = [bin(nil,_,nil)]; ---> [1]
%L = [bin(nil,_,nil), bin(nil,_,nil)]; ---> [1,1]
%L = [bin(nil,_, bin(nil,_,nil))];  ---> [2]
%L = [bin(bin(nil _,nil),_,nil)];   ---> [2]
%L = [bin(nil,_,nil), bin(nil,_,nil), bin(nil,_,nil)]; --> [1,1,1]
%---> [1,2]
%---> [1,2]
%---> [2,1]
%---> [2,1]
%---> [3]

listaDeArboles(L) :- desde(0,S), listaAcotadaDeArboles(S,L).

listaAcotadaDeArboles(0,[]).
listaAcotadaDeArboles(S,[X|XS]) :- between(1,S,Na), 
		arbolDeN(Na,X), S2 is S-Na, 
		listaAcotadaDeArboles(S2,XS).


arbolDeN(0,nil).
arbolDeN(N,bin(I,_,D)) :- N > 0, N2 is N-1, paresQueSuman(N2,NI,ND), arbolDeN(NI,I), arbolDeN(ND,D).

paresQueSuman(S,X,Y) :- between(0,S,X), Y is S-X.


tamArbol(0,nil).
tamArbol(N,bin(I,_,D)) :- tamArbol(NI,I), tamArbol(ND,D), N is 1+NI+ND.

calcularTamanios(AS,TS) :- maplist(tamArbol,TS,AS).

---------------------

PERMUTACIÓN, creditos a honi

%% permutación()
%% el algoritmo funciona ya que cuando hacemos insertar metemos a X (la cabeza actual de la lista que "queremos" permutar
%% es insertada en una posición arbitraria de la lista, permitiendonos crear cualquier permutación posible  
permutacion([], []).
permutacion([X|Xs], Ys) :- permutacion(Xs, Zs), insertar(X, Zs, Ys).
insertar(X, L, LX) :- append(P, S, L), append(P, [X|S], LX).








